
TODO/ BRAINSTORMING:



I want to move the communication between the microcontroller and the driver to hexadecimal. Using binary, currently locks me into 4 bit numbers, so limits me to 16 button.
Because of how python interprets hexadecimal, I can split each button at "0x", which would allow me to have asmany buttons as I want.
I will also change the message structure to button, event, *layers, instead if *layers, event, button.

The newest version of the PCB has workign rgb, so I want to leds light up when a button is pressed.
If your holding one button then press another, I want the one your holding change colors to like yellow, to shoow its acting like a layer.
then when a msg is sent, either and led on the pcb or microcontroller will flash.

I want to have a red light show when the pause button is pressed. and because the driver handles that, I will either have to mvoe that to the microcontroller 
or have the driver send messages to the microcontroller.

Mode:               TX0
LED:                RX1

Row 0:              A3
Row 1:              D2
Row 2:              D3

Column 0:           D10
Column 1:           A0
Column 2:           A1
Column 3:           A2

Encoder1 Pin A:     D4
Encoder1 Pin B:     D5
Encoder1 Button:    D8

Encoder2 Pin A:     D6
Encoder2 Pin B:     D7
Encoder2 Button:    D9





Coming back to this, it looks so fucked. idk why i did the if MatrixEvent.key_number != 0: in if MatrixEvent.pressed:
I only want messages to be sent when a button is realeased so I can do layers
Now because keypad.KeyMatrix doesnt really work when 2 keys are pressed at the same time, I have 2 options

write my own thing, or work arround it.


To work arround it, my idea is to
only send msgs when a button is relleased, and when a button is pressed, add the timestamp to a list at the index number that corresponds to the button.

when i rellease a button or turn the rotary encoders, the msgConstructor() fuction is called that handles the msg stuff.

in it, you will pass the MatrixEvent var, a type var, so "button", "mode", "rotary encoder", and the a list of vars for encoders.

fisrt thing we'll do is check what type it is.

    layers = []


    if type is "mode", 
        check if it has a timestamp and if diff <(less then) 0.250:  then send: 00010000 (0001 = release 0000 = mode)
        type_bits = 0000
        action_bits = 0001
        then make the timstamp for mode 0
    

    if type is "rotary encoder" look at the encoder vars list, which would be ordered as ["name", ChangeInPosition, buttonState],  
        ex: ["Encoder1", 2, True] or ["Encoder2", -3, False]
        if name = "Encoder1":
            type_bits = 1110   (14)
        elif name = "Encoder2":
            type_bits = 1111   (15)

            
        bit2 = {list[2]}   # 0 if button is not pressed, 1 if pressed
        bit4 = {is_negative(list[1])}   # true = 1 if negative, 0 if false
        action_bits = f"0{bit2}1{bit4}"
        0010: rotary left w/o button
        0011: rotary right w/o button

        0110: rotary left w/ button
        0111: rotary right w/ button 


    if type is "button"
        check if it has a timestamp and 
        if diff <(less then) 0.100:
        
        new_num = int(MatrixEvent.key_number) + 1
        
        type_bits = bits(new_num)
        action_bits = 0001 (release)

        then make the timstamp for MatrixEvent.key_number = 0


    msg = "{action_bits}{type_bits}"

    Then we can go into layers.   
    current_timestap  = MatrixEvent.timestamp

    for i in held_keys:
        if i != 0:
            #if there is a button  that is being held
            diff = (current_timestap - i)/1000
            if diff > 0.100:  # greater then 0.1 sec
                index_of_held_key = held_keys.index(i)
                new_index_num = index_of_held_key + 1
                
                if key_names[index_of_held_key] == 'ModeButton':
                    layer_bits = "0000"
                else: 
                    layer_bits = bits(new_index_num)

                msg = layer_bits + msg  

                
        held_keys[MatrixEvent.key_number]  = 0

        

First thing it will do is, it will get th current timestamp, and it will compare it to the timstamp in the active_keys list at index [MatrixEvent.key_number]   divided by 1000, cuz the timstamp is in ms
then if the difference is less then(<) 0.100 s, that means its not a layer/held button and is the one we want.

then start the msg.

If its the mode button being released, I don't need to do the layer stuff cuz it wont be used for that.    
