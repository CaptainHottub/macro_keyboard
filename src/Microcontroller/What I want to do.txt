
TODO:
Will  need to merge drivers, v2.0.001 and v2.1.001 to  make v2.2.001
I want to use the Driver  class from v2.1
I want to use th button handler,  tools and  custom_keyboard from v2.0

replace the spotify controller with NewAudioControlTest and add the chrome audio control code
which will be use mode button or button 0 as the layer with button 1




What I tried to do in the last version was so dumb

I can just encode all the button information into binary

So the Idea is to sepperate each data type into its own 4 bits

Each time I press a button on my macro it will send minimum of 8 bit string.  (00000000)

starting from right to left,
the first 4 bits will represent what button/rotary encoder is being pressed. I will have 16 total numbers to use, 0 to 15
eg: 0000 = 0 = mode button
    0011 = button 4 

0 is mode button, 1 thru 12 is macro buttons and 14, 15 are rotary encoders.

then the next 4 will determine the action:
0000: Button Press
0001: Button Release
0010: rotary left w/o button
0011: rotary right w/o button

0110: rotary left w/ button
0111: rotary right w/ button

so an example if button 4 is released: 00010011   = 0001 0011
Eg of rotary 1 going to left with button:  01101110   = 0110 1110

If i want to send the change in possition of the rotary encoder I can use Sign-magnitude binary which would add another 4 bits:
eg of rotary 1 without button going +2 to the left: 0010 0010 1110

Then I could add as many layers I want to that by adding 4 bits to it wich would correspond to what button is pressed:
eg button 4 rellease with mode button held: 000000010011   = 0000 0001 0011
eg button 4 rellease with mode button and btn 1 held: 0001000000010011   = 0001 0000 0001 0011


every 4 item split the string and put it in a list,
loop through it starting from the back. 

turn the last 4 bits into ints,
if its 0 = mode
elif 14 = rotary 1
elif 15 rotary 2

then the 2nd last one in list.
pass the 4 bits throug a dict to get the event.

then anything after that will be layers/modifiers, 
wich i will put into a list, and convert the 4 bits into int

then in button handler, have it  modifers, button









Coming back to this, it looks so fucked. idk why i did the if MatrixEvent.key_number != 0: in if MatrixEvent.pressed:
I only want messages to be sent when a button is realeased so I can do layers
Now because keypad.KeyMatrix doesnt really work when 2 keys are pressed at the same time, I have 2 options

write my own thing, or work arround it.


To work arround it, my idea is to
only send msgs when a button is relleased, and when a button is pressed, add the timestamp to a list at the index number that corresponds to the button.

when i rellease a button or turn the rotary encoders, the msgConstructor() fuction is called that handles the msg stuff.

in it, you will pass the MatrixEvent var, a type var, so "button", "mode", "rotary encoder", and the a list of vars for encoders.

fisrt thing we'll do is check what type it is.

    layers = []


    if type is "mode", 
        check if it has a timestamp and if diff <(less then) 0.250:  then send: 00010000 (0001 = release 0000 = mode)
        type_bits = 0000
        action_bits = 0001
        then make the timstamp for mode 0
    

    if type is "rotary encoder" look at the encoder vars list, which would be ordered as ["name", ChangeInPosition, buttonState],  
        ex: ["Encoder1", 2, True] or ["Encoder2", -3, False]
        if name = "Encoder1":
            type_bits = 1110   (14)
        elif name = "Encoder2":
            type_bits = 1111   (15)

            
        bit2 = {list[2]}   # 0 if button is not pressed, 1 if pressed
        bit4 = {is_negative(list[1])}   # true = 1 if negative, 0 if false
        action_bits = f"0{bit2}1{bit4}"
        0010: rotary left w/o button
        0011: rotary right w/o button

        0110: rotary left w/ button
        0111: rotary right w/ button 


    if type is "button"
        check if it has a timestamp and 
        if diff <(less then) 0.100:
        
        new_num = int(MatrixEvent.key_number) + 1
        
        type_bits = bits(new_num)
        action_bits = 0001 (release)

        then make the timstamp for MatrixEvent.key_number = 0


    msg = "{action_bits}{type_bits}"

    Then we can go into layers.   
    current_timestap  = MatrixEvent.timestamp

    for i in held_keys:
        if i != 0:
            #if there is a button  that is being held
            diff = (current_timestap - i)/1000
            if diff > 0.100:  # greater then 0.1 sec
                index_of_held_key = held_keys.index(i)
                new_index_num = index_of_held_key + 1
                
                if key_names[index_of_held_key] == 'ModeButton':
                    layer_bits = "0000"
                else: 
                    layer_bits = bits(new_index_num)

                msg = layer_bits + msg  

                
        held_keys[MatrixEvent.key_number]  = 0

        

First thing it will do is, it will get th current timestamp, and it will compare it to the timstamp in the active_keys list at index [MatrixEvent.key_number]   divided by 1000, cuz the timstamp is in ms
then if the difference is less then(<) 0.100 s, that means its not a layer/held button and is the one we want.

then start the msg.

If its the mode button being released, I don't need to do the layer stuff cuz it wont be used for that.    
