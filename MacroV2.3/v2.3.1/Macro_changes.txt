##############   Not Implemented But want to   ############## 
Macro mode needs to be updated.
maybe update the code on the arduino so it just sends mode and not stores the mode on it.


##############   V2.3.1   ############## 
Modified the Match case and added some new macros.
Added a Notification toggle.
Removed ctypes_keyboard.py as that functionality is in custom_keyboard.py
Removed Change_desktop function from funcs


##############   V2.3.0   ############## 

Updated spotify function in funcs.py to fix a bug which caused it to stop working. 
It should be resolved now.
Also added a dev area

I also added a new version format.

Added a shield focus function for star citizen

Moved change_desktop from Funcs to MacroV2.3.0 in Button_handler()
to remove a call to funcs, and to maybe make it slightly faster
Also added back:        So will alt tab if star citizen is focused
    if focused_app in ("Star Citizen"): 
        custom_keyboard.hotkey('alt', 'tab')
        time.sleep(0.1)


Removed is_fullscreen() and Change_desktop() in Funcs


##############   V2_2.1   ##############
Updated playPause(), now at V5
Also moved it into spotify().

PlayPause now gets the parent PID, so it only returns one item, so no need to loop through them all to find the right one.
Removed Set Focus or wtv its called, is now part of PlayPause

Changed Code for System Tray Icon.
I did this because it didnt work with the new icon

Was using infi.systray.SysTrayIcon  
Now using pystray and PIL.Image

Changed Icon path from "C:\Coding\Arduino Stuff\Projects\Arduino Python\MacroV2\python.ico" to:
"C:\Coding\Arduino Stuff\Projects\macro_keyboard\MacroV2\pythonIcon.ico"
And using Image.open() to open the image before

The following was Removed:
    systray = SysTrayIcon(icon_path, "Python Macro", on_quit=on_quit) # little icon in bottom right
    systray.start()
    
    and "SysTrayIcon.shutdown" in def on_quit():

It was replaced with:     
    twrv = Thread(target = sysIcon).start()

    and 
    def sysIcon():
        systray = pystray.Icon("Neural", image, menu=pystray.Menu(
            pystray.MenuItem("Quit", on_quit)
        ))
        systray.run()

"SysTrayIcon.shutdown" in on_quit() was replaced with:
systray.stop()


##############   V2_2   ##############
Changed icon_path from "C:\Coding\Python\pythonScript.ico" to:
"C:\Coding\Arduino Stuff\Projects\Arduino Python\MacroV2\python.ico"


The following was moved into if __name__ == "__main__":
    DEBUG = 0  # 0 for off 1 for DEBUG logs on
    logger_setup(DEBUG)
    from funcs import log

Importing all from funcs
From funcs importing:
    import contextlib
    import threading
    from threading import Thread
    import warnings
    import psutil
    import pyautogui
    import os, win32gui, win32process
    import pyperclip
    from pywinauto import Application
    from ctypes import windll
    from PIL import ImageGrab
    import logging
    import time


Removed: 
    #import time
    #import pyautogui
    #from threading import Thread
    #import funcs
    #import timeit



























##############   V2_3   ##############
Removed stuff
def Button_handler_v1(button):
    get_stats()

    app = stats["focused_app"][0]

    ###### Macros that work for all modes
    match button.split():
        case ["2", mode]: # pause song spotify
            log.debug("pause song spotify")
            spotify()
            return
        case ["3", mode]:    # move desktop left
            log.debug("move desktop left")
            twrv = Thread(target = Change_desktop, args=('left',)).start()
            return

        case ["4", mode]:     # move desktop right   
            log.debug("move desktop Right")
            twrv = Thread(target = Change_desktop, args=('right',)).start()
            return

    match [app]:
        case ['Visual Studio Code']:
            match button.split():
                case ["5", mode]:    # run code in Vs code
                    pyautogui.hotkey('ctrl', 'alt', 'n')

                case [btn, mode]:
                    print(f"button {btn} pressed on Visual Studio Code")    

        case _:
            match button.split():
                ###### Macros that work for all modes
            
                case [btn, mode]:
                    print(f"button {btn} pressed on universal layer")
 